[{"content":"\u003c!-- ## Mathjax --\u003e\n\u003cp\u003eIn this project, a dataset containing credit card transactions is examined with the goal of training and testing a machine learning classifier models: K-Nearest Neighbors (KNN). The objective is to predict which transactions are likely to be fraudulent.\u003c/p\u003e\n\u003cp\u003eAfter training the model, we will evaluate its performance using a confusion matrix and accuracy metrics. This assessment will help us determine if the model is a suitable choice for accurately identifying fraudulent transactions.\u003c/p\u003e\n\u003c!-- $$ | Pr_{x \\leftarrow P_{1}} [A(x) = 1] - Pr_{x \\leftarrow P_{2}} [A(x) = 1] | \u003c \\text{negligible} $$ --\u003e\n\u003c!-- Import Libraries:\n\n```\n$$ | Pr_{x \\leftarrow P_{1}} [A(x) = 1] - Pr_{x \\leftarrow P_{2}} [A(x) = 1] | \u003c \\text{negligible} $$\n```\n --\u003e\n\u003cp\u003e\u003cstrong\u003eStep 1: Import Libraries\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport seaborn as sns\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score, KFold\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 2: EDA\u003c/strong\u003e\n\u003cbr\u003e\nIn this step we are reading in the credit card transactions dataset and understanding the structure of the data. \u003cbr\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edata_trx = pd.read_csv(r\u0026#34;creditcard_trx.csv\u0026#34;)\ndata_trx.shape\ndata_trx.info()\ndata_trx.head()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cfigure\u003e\u003cimg src=\"/images/fraud_info1.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\n\u003cfigure\u003e\u003cimg src=\"/images/fraud_head.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\nNext lets breakdown the number of fraudulent cases in the dataset. \u0026lt;br\u0026gt;\n\u003cfigure\u003e\u003cimg src=\"/images/class_fraud.png\"/\u003e\n\u003c/figure\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c!-- image: \"/images/me1.png\" --\u003e\n\u003cp\u003e\u003cstrong\u003eCorrelation Heatmap\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\nNext lets plot a correlation heatmap to represent the data in data_trx dataset \u0026lt;br\u0026gt;\n\u003cfigure\u003e\u003cimg src=\"/images/heatmap_fraud.png\"/\u003e\n\u003c/figure\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eMedian fraudulent Purchase Price\u003c/strong\u003e\n\u003cbr\u003e\n\u003cfigure\u003e\u003cimg src=\"/images/histo_fraud.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 3: Pre-processing\u003c/strong\u003e\u003cbr\u003e\n\u003cbr\u003eRead the features and target values into X and y respectivley\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eX = data_trx.drop(\u0026#34;fraud\u0026#34;, axis=1).values\ny = data_trx[\u0026#34;fraud\u0026#34;].values\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003eThis step will split the data into training and test sets\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 4: Building a KNN Classifier Model\u003c/strong\u003e\u003cbr\u003e\nThis block of code creates an array of train and test accuracies, sets up a KNN Classifier, and loops through values of k from 2-30.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eneighbors = np.arange(2, 31)\ntrain_accuracies = {}\ntest_accuracies = {}\n\nfor neighbor in neighbors:\n\n    knn = KNeighborsClassifier(n_neighbors=neighbor)\n    knn.fit(X_train, y_train)\n\n    train_accuracies[neighbor] = knn.score(X_train, y_train)\n    test_accuracies[neighbor ]= knn.score(X_test, y_test)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003ePrinting the neighbor value and corresponding test accuracy as a percentage:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cfigure\u003e\u003cimg src=\"/images/nebs_fraud.PNG\"/\u003e\n\u003c/figure\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eVisualizing the test accuracies with various k values\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cfigure\u003e\u003cimg src=\"/images/knn_fraud.png\"/\u003e\n\u003c/figure\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 5: Evaluating Classifier Metrics\u003c/strong\u003e\u003cbr\u003e\nFrom the analysis we know that the optimal value for k=2. So lets evaluate the models performance metrics using this k value.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eknn = KNeighborsClassifier(n_neighbors=2)\n#knn = neighbors.KNeighborsClassifier(n_neighbors = 2)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\n\nprecision_score(y_test, y_pred)\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cimg src=\"/images/prec2.png\"/\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cbr\u003eImporting the confusion matrix library and printing out the matrix\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix, precision_score\ncm = confusion_matrix(y_test, y_pred)\ncm\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cfigure\u003e\u003cimg src=\"/images/prec.png\"/\u003e\n\u003c/figure\u003e\n\n\u003cstrong\u003eInterpreting the Confusion Matrix\u003c/strong\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eIn the context of fraud detection or any binary classification problem, the confusion matrix is used to assess how well the model is performing in terms of identifying true cases (fraud) and true non-cases (non-fraud), as well as the errors (false positives and false negatives) it makes. The goal is to minimize false positives and false negatives while maximizing true positives and true negatives.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eTrue Positives (TP): 15,378\u003c/em\u003e\u003cbr\u003e\nThis is the number of instances that are actually positive (fraud cases) and are correctly predicted as positive by the model.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eTrue Negatives (TN): 181,761\u003c/em\u003e\u003cbr\u003e\nThis is the number of instances that are actually negative (non-fraud) and are correctly predicted as negative by the model.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFalse Positives (FP): 758\u003c/em\u003e\u003cbr\u003e\nThis is the number of instances that are actually negative but are incorrectly predicted as positive by the model. These are also known as Type I errors or \u0026ldquo;false alarms.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFalse Negatives (FN): 2,103\u003c/em\u003e\u003cbr\u003e\nThis is the number of instances that are actually positive (fraud) but are incorrectly predicted as negative by the model. These are also known as Type II errors or \u0026ldquo;missed cases.\u0026rdquo;\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"/images/cmplot.png\"/\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e\u003cbr\u003e\nThe model\u0026rsquo;s precision score of 95% and the confusion matrix show that it\u0026rsquo;s doing an excellent job at accurately identifying positive cases (such as fraud) with very few false positives. This makes it well-suited for applications where precision is critical, like fraud detection.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFor more information head over to my Github\u003c/em\u003e\u003c/p\u003e\n","description":"","image":"/images/fraud.png","permalink":"https://hugo-profile.netlify.app/blogs/mathjax/","title":"ML Classifier Models: Fraud Detection"},{"content":"\u003c!-- ## Mathjax --\u003e\n\u003cp\u003eIn this project, we will leverage a dataset containing various features like beats per minute (bpm), energy, decibels (dB), acoustic characteristics, and more. The objective is to employ these features to make predictions for the target variable, which is the popularity of songs.\u003c/p\u003e\n\u003cp\u003eTwo regression models, linear regression and ridge regression, will be utilized to train the dataset. The performance of both models will be compared through an evaluation of key metrics like Root Mean Square Error (RMSE) and the coefficient of determination (R^2). Following this analysis, it will be possible to provide a recommendation regarding which model offers superior predictions for song popularity when applied to a test dataset.\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003c!-- $$ | Pr_{x \\leftarrow P_{1}} [A(x) = 1] - Pr_{x \\leftarrow P_{2}} [A(x) = 1] | \u003c \\text{negligible} $$ --\u003e\n\u003c!-- Import Libraries:\n\n```\n$$ | Pr_{x \\leftarrow P_{1}} [A(x) = 1] - Pr_{x \\leftarrow P_{2}} [A(x) = 1] | \u003c \\text{negligible} $$\n```\n --\u003e\n\u003cp\u003e\u003cstrong\u003eStep 1: Import Libraries\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nimport seaborn as sns\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score, KFold\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 2: EDA\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edf_music.info()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cfigure\u003e\u003cimg src=\"/images/info.png\"\n         alt=\"Image Alt Text\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003c/p\u003e\n\u003c!-- \u003cfigure\u003e\u003cimg src=\"/images/info.png\"\n         alt=\"Image Alt Text\"/\u003e\u003cfigcaption\u003e\n            \u003cp\u003eImage Caption Here\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n --\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edf_music.head()\n\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cimg src=\"/images/headcode.png\"/\u003e\n\u003c/figure\u003e\n\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\nUsing seaborn the top 8 genres were plotted against their popularity \u003cbr\u003e\n\u003cfigure\u003e\u003cimg src=\"/images/top.png\"/\u003e\n\u003c/figure\u003e\n\n\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003eCorrelation Heatmap\u003c/strong\u003e\nNext lets plot a correlation heatmap to represent the data in df_music \u003cbr\u003e\n\u003cfigure\u003e\u003cimg src=\"/images/heatmap.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003eScatter Matrix\u003c/strong\u003e\nUsing a scatter matrix allows us to analyze the relationship between the various features and the target variable in this case song popularity.\nFrom the matrix wee can see the most of the relationships are non-linear. \u003cbr\u003e\n\u003cfigure\u003e\u003cimg src=\"/images/scatter.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 3: Pre-processing\u003c/strong\u003e\u003cbr\u003e\n\u003cbr\u003eDelete ID, Title, artist, and year\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edf_music.drop(columns = [\u0026#39;id\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;artist\u0026#39;, \u0026#39;year\u0026#39;], inplace = True)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003eThis step will encode dummy variables ie. it will convert the text genre categories into binary 0 or 1 values\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emusic_dummies=pd.get_dummies(df_music[\u0026#39;top genre\u0026#39;],drop_first=True)\nprint(music_dummies.head())\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEach genre category is now encoded as a 0 or 1. For example in row 102 the genre is \u0026lsquo;dance pop\u0026rsquo; therefore this column will contain a 1 with all other genre categories containing a 0.\n\u003cbr\u003e\u003cfigure\u003e\u003cimg src=\"/images/mdum.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cbr\u003eBring these new columns into the df_music dataframe and display the appended df_music dataframe\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edf_music=pd.concat([df_music,music_dummies],axis=1)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cfigure\u003e\u003cimg src=\"/images/mdumnew.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\n\u003cstrong\u003eStep 4: Building a Linear Regression Model\u003c/strong\u003e\u003cbr\u003e\n\u003cbr\u003eSplit the features and target variables into X and y respectively\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eX = df_music.drop(\u0026#34;pop\u0026#34;, axis=1).values\ny = df_music[\u0026#34;pop\u0026#34;].values\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003eInstantiate a linear regression model\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ereg=LinearRegression()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003ePerform a 10-fold cross-validation to ensure that data is tested on multiple sets\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ekf = KFold(n_splits=10, shuffle=True, random_state=5)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eEvaluating Linear Regression Metrics\u003c/strong\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecv_results=cross_val_score(reg, X_train,y_train,cv=kf)\ncv_results_MSE=cross_val_score(reg, X_train,y_train,cv=kf,scoring=\u0026#34;neg_mean_squared_error\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTable below displays the R^2 and RMSE value across each cross-fold\n\u003cfigure\u003e\u003cimg src=\"/images/metrics1.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eBelow are the average results of R^2 and RMSE metrics after training using a linear regression model.\n\u003cfigure\u003e\u003cimg src=\"/images/metricnum1.png\"/\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cbr\u003e R-squared (R²) measures the proportion of the variance in the dependent variable (in this case, \u0026lsquo;popularity\u0026rsquo;) that is explained by the independent variables (features) in the model. As we know R^2 ranges from 0-1 with higher values indicating a better fit. This means the linear regression model is performing poorly.\u003c/p\u003e\n\u003cp\u003e\u003cbr\u003eThe Root Mean Squared Error (RMSE) measures the average absolute error between the predicted values and the actual values. It provides a measure of how well the model\u0026rsquo;s predictions match the true values. Lower RMSE values indicate better model performance.\u003c/p\u003e\n\u003cp\u003eBased on these results the linear regression model is not a good fit. Let\u0026rsquo;s try a different model.\n\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 5: Building a Ridge Regression Model\u003c/strong\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cbr\u003eImport modules\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efrom sklearn.linear_model import Ridge\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e Let\u0026rsquo;s select a range of alphas and instantiate the ridge model within the for loop\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ealphas = [0.1, 0.5, 0.75, 1.0, 1.25, 1.5, 2.0, 2.5]\nfor alpha in alphas:\n    ridge = Ridge(alpha=alpha)\n    # Perform cross-validation and obtain R-squared scores\n       cv_scores = cross_val_score(ridge, X, y, cv=5, scoring=\u0026#39;r2\u0026#39;)\n\n       # Calculate the average R-squared score across the 5 folds\n       average_score = cv_scores.mean()\n\n       # Calculate RMSE for each fold\n       rmse_scores = np.sqrt(-cross_val_score(ridge, X, y, cv=5, scoring=\u0026#39;neg_mean_squared_error\u0026#39;))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor each alpha the average (across the 5 cross folds) R^2 and RMSE value was saved in a table\n\u003cfigure\u003e\u003cimg src=\"/images/alpha1.png\"/\u003e\n\u003c/figure\u003e\n\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEvaluating Ridge Regression Metrics\u003c/strong\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003eUsing ridge regression the R^2 and RMSE metrics are as follows:\u003c/p\u003e\n\u003cp\u003eAverage R^2 across alphas: 0.16\u003cbr\u003e\nAverage RMSE across alphas: 8.9\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRecommendation\u003c/strong\u003e\u003cbr\u003e\nRidge regression significantly reduced the RMSE, highlighting it\u0026rsquo;s ability to handle the limitations of linear regression.\nThe R^2 and RMSE values are of much more acceptable levels making ridge regression a more optimal model to predict the target variable, song popularity.\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFor more information head over to my Github\u003c/em\u003e\u003c/p\u003e\n","description":"","image":"/images/mathjax2.png","permalink":"https://hugo-profile.netlify.app/blogs/regressionml/","title":"ML Regression Models: Song Popularity Predictor "},{"content":"","description":"My gallery :earth_asia:","image":null,"permalink":"https://hugo-profile.netlify.app/gallery/","title":"Image Gallery"},{"content":"\u003ch2 id=\"web-scraping-to-extract-top-email-senders\"\u003eWeb scraping to extract top email senders\u003c/h2\u003e\n\u003cp\u003eIn this project, I\u0026rsquo;m writing a Python script that will be used for extracting email data from a Gmail account, creating a Pandas DataFrame, and performing some data analysis and visualization. In the end we will be able to identify the email IDs of top senders.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 1: Import Libraries\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport imaplib\nimport email\nimport getpass\nimport pandas as pd\nfrom datetime import datetime\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 2: Connecting to the email account\u003c/strong\u003e\n\u003cbr\u003e\nIn this step we are connecting the users gmail account. \u003cbr\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eusername = \u0026#34;YourEmail@gmail.com\u0026#34;\npassword = \u0026#34;YourPassword\u0026#34;\nmail = imaplib.IMAP4_SSL(\u0026#39;imap.gmail.com\u0026#39;)\nmail.login(username, password)\nmail.select(\u0026#34;inbox\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 3: EDA\u003c/strong\u003e\n\u003cbr\u003e\nIn this step we are connecting the users gmail account. \u003cbr\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eresult, numbers = mail.uid(\u0026#39;search\u0026#39;, None, \u0026#34;ALL\u0026#34;)\nuids = numbers[0].split()\nuids = [id.decode(\u0026#34;utf-8\u0026#34;) for id in uids]\nuids = uids[-1:-3000:-1]\nresult, messages = mail.uid(\u0026#39;fetch\u0026#39;, \u0026#39;,\u0026#39;.join(uids), \u0026#39;(BODY[HEADER.FIELDS (SUBJECT FROM DATE)])\u0026#39;)\n\ndate_list = []\nfrom_list = []\nfrom_list1 = []\ndate_list1 = []\nsubject_text = []\n\nfor i, message in messages[::2]:\n    msg = email.message_from_bytes(message)\n    decode = email.header.decode_header(msg[\u0026#39;Subject\u0026#39;])[0]\n    if isinstance(decode[0], bytes):\n        decoded = decode[0].decode(errors=\u0026#39;ignore\u0026#39;)\n        subject_text.append(decoded)\n    else:\n        subject_text.append(decode[0])\n    date_list.append(msg.get(\u0026#39;date\u0026#39;))\n    fromlist = msg.get(\u0026#39;From\u0026#39;)\n    fromlist = fromlist.split(\u0026#34;\u0026lt;\u0026#34;)[0].replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#39;)\n    from_list1.append(fromlist)\n\ndate_list = pd.to_datetime(date_list)\ndate_list1 = [item.isoformat(\u0026#39; \u0026#39;)[:-6] for item in date_list]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 4: Count and display top senders\u003c/strong\u003e\n\u003cbr\u003e\nIn this step we are connecting the users gmail account. \u003cbr\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edf = pd.DataFrame(data={\u0026#39;Date\u0026#39;: date_list1, \u0026#39;Sender\u0026#39;: from_list1, \u0026#39;Subject\u0026#39;: subject_text})\n\nsender_counts = df[\u0026#39;Sender\u0026#39;].value_counts()\nprint(sender_counts.head(10))  # Display the top 10 senders\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eStep 5: Visualize the inbox\u003c/strong\u003e\n\u003cbr\u003e\nIn this step we are using Wordcloud to see the most used words in the email subjects. \u003cbr\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edf.to_csv(r\u0026#39;C:\\Users\\User\\Desktop\\email_inbox.csv\u0026#39;, index=False)\n\ndf_description = df.describe()\nprint(\u0026#34;\\nDataFrame Description:\u0026#34;)\nprint(df_description)\n\ntext = \u0026#34;\u0026#34;\nfor item in df[\u0026#34;Subject\u0026#34;]:\n    if isinstance(item, str):\n        text += \u0026#34; \u0026#34; + item\n    text = text.replace(\u0026#34;\u0026#39;\u0026#34;, \u0026#34;\u0026#34;)\n    text = text.replace(\u0026#34;,\u0026#34;, \u0026#34;\u0026#34;)\n    text = text.replace(\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#39;)\n\n\nwordcloud = WordCloud(width=800, height=800, background_color=\u0026#34;white\u0026#34;)\n\nwordcloud.generate(text)\nplt.figure(figsize=(8, 8))\nplt.imshow(wordcloud, interpolation=\u0026#34;bilinear\u0026#34;)\nplt.axis(\u0026#34;off\u0026#34;)\nplt.margins(x=0, y=0)\nplt.title(\u0026#34;Most Used Subject Words\u0026#34;, fontsize=20, ha=\u0026#34;center\u0026#34;, pad=20)\nplt.show()\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":"/images/email.png","permalink":"https://hugo-profile.netlify.app/blogs/markdown-syntax/","title":"Email Data Scraping \u0026 Analytics with Python"},{"content":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways. :zap:\u003c/p\u003e\n\u003ch2 id=\"emoji-support\"\u003eEmoji Support\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href=\"https://gohugo.io/functions/emojify/\"\u003eemojify\u003c/a\u003e function can be called directly in templates or \u003ca href=\"https://gohugo.io/templates/shortcode-templates/#inline-shortcodes\"\u003eInline Shortcodes\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo enable emoji globally, set \u003ccode\u003eenableEmoji\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e in your site’s \u003ca href=\"https://gohugo.io/getting-started/configuration/\"\u003econfiguration\u003c/a\u003e and then you can type emoji shorthand codes directly in content files; e.g.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"http://www.emoji-cheat-sheet.com/\"\u003eEmoji cheat sheet\u003c/a\u003e is a useful reference for emoji shorthand codes.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eN.B.\u003c/strong\u003e The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e.emoji {\n  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;\n}\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":"/images/post.jpg","permalink":"https://hugo-profile.netlify.app/blogs/emoji-support/","title":"Emoji Support"},{"content":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de pectora summo.\u003c/p\u003e\n\u003cp\u003eRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eExierant elisi ambit vivere dedere\u003c/li\u003e\n\u003cli\u003eDuce pollice\u003c/li\u003e\n\u003cli\u003eEris modo\u003c/li\u003e\n\u003cli\u003eSpargitque ferrea quos palude\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eComas hunc haec pietate fetum procerum dixit\u003c/li\u003e\n\u003cli\u003ePost torum vates letum Tiresia\u003c/li\u003e\n\u003cli\u003eFlumen querellas\u003c/li\u003e\n\u003cli\u003eArcanaque montibus omnes\u003c/li\u003e\n\u003cli\u003eQuidem et\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"vagus-elidunt\"\u003eVagus elidunt\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon\"\u003eThe Van de Graaf Canon\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"mane-refeci-capiebant-unda-mulcebat\"\u003eMane refeci capiebant unda mulcebat\u003c/h2\u003e\n\u003cp\u003eVicta caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\u003c/p\u003e\n\u003cp\u003eIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\u003c/p\u003e\n\u003cp\u003eEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\u003c/p\u003e\n","description":"","image":"/images/post.jpg","permalink":"https://hugo-profile.netlify.app/blogs/placeholder-text/","title":"Placeholder Text"},{"content":"\u003cp\u003eHugo ships with several \u003ca href=\"https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes\"\u003eBuilt-in Shortcodes\u003c/a\u003e for rich content, along with a \u003ca href=\"https://gohugo.io/about/hugo-and-gdpr/\"\u003ePrivacy Config\u003c/a\u003e and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\u003c/p\u003e\n\u003ch2 id=\"gist-simple-shortcode\"\u003eGist Simple Shortcode\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{{\u0026lt; gist spf13 7896402 \u0026#34;img.html\u0026#34; \u0026gt;}}\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js?file=img.html\"\u003e\u003c/script\u003e\n\n\u003cbr\u003e\n\u003ch2 id=\"twitter-simple-shortcode\"\u003eTwitter Simple Shortcode\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{{\u0026lt; tweet GoHugoIO 1315233626070503424 \u0026gt;}}\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\u003cblockquote class=\"twitter-tweet\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eProfile is a customizable single-page portfolio theme for Hugo featuring a contact form and blog. Made by \u003ca href=\"https://twitter.com/gurusabarishh?ref_src=twsrc%5Etfw\"\u003e@gurusabarishh\u003c/a\u003e.\u003ca href=\"https://t.co/KwYcwfdy16\"\u003ehttps://t.co/KwYcwfdy16\u003c/a\u003e\u003c/p\u003e\u0026mdash; GoHugo.io (@GoHugoIO) \u003ca href=\"https://twitter.com/GoHugoIO/status/1315233626070503424?ref_src=twsrc%5Etfw\"\u003eOctober 11, 2020\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n\u003cbr\u003e\n\u003ch2 id=\"vimeo-simple-shortcode\"\u003eVimeo Simple Shortcode\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{{\u0026lt; vimeo 146022717 \u0026gt;}}\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://player.vimeo.com/video/146022717\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"vimeo video\" webkitallowfullscreen mozallowfullscreen allowfullscreen\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n\u003cbr\u003e\n\u003ch2 id=\"youtube-simple-shortcode\"\u003eYoutube Simple Shortcode\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{{\u0026lt; youtube w7Ft2ymGmfc \u0026gt;}}\n\u003c/code\u003e\u003c/pre\u003e\u003cbr\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/w7Ft2ymGmfc\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n\u003cbr\u003e\n\u003ch2 id=\"theme-custom-shortcodes\"\u003eTheme Custom Shortcodes\u003c/h2\u003e\n\u003cp\u003eThese shortcodes are not Hugo built-ins, but are provided by the theme.\u003c/p\u003e\n\u003ch3 id=\"responsive-images-with-cloudinary\"\u003eResponsive Images with Cloudinary\u003c/h3\u003e\n\u003cp\u003eYou can learn more about this \u003ca href=\"https://cloudinary.com/documentation/responsive_images\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSet the \u003ccode\u003ecloudinary_cloud_name\u003c/code\u003e parameter in your site config to use this shortcode.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{{\u0026lt; dynamic-img src=\u0026#34;/my/image/on/cloudinary\u0026#34; title=\u0026#34;A title for the image\u0026#34; \u0026gt;}}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNote that you do not include the file extension (e.g. \u003ccode\u003e.png\u003c/code\u003e) in the \u003ccode\u003esrc\u003c/code\u003e parameter, as the shortcode will automatically determine the best quality and format for the user\u0026rsquo;s device.\u003c/p\u003e\n\u003cp\u003eOptionally, you can customize the general CSS styles for the image:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{{\u0026lt; dynamic-img src=\u0026#34;/my/image/on/cloudinary\u0026#34; title=\u0026#34;A title for the image\u0026#34; style=\u0026#34;max-width:60%\u0026#34; \u0026gt;}}\n\u003c/code\u003e\u003c/pre\u003e","description":"","image":"/images/post.jpg","permalink":"https://hugo-profile.netlify.app/blogs/rich-content/","title":"Rich Content"}]